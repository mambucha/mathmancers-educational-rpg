from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy.sql.expression import func
from app.db import models
from app.schemas import battle as battle_schema
from app.services import math_service
from app.auth import get_current_user
from app.api.v1 import deps
from app.services.math_service import generate_special_encounter

router = APIRouter()

@router.get("/battle/start", response_model=battle_schema.BattleState)
def start_battle(db: Session = Depends(deps.get_db), current_user: models.User = Depends(get_current_user)):
    """–†–æ–∑–ø–æ—á–∏–Ω–∞—î –±—ñ–π –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –≤–æ—Ä–æ–≥–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π"""
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–æ—Ä–æ–≥–∞
    enemy = db.query(models.Enemy).order_by(func.random()).first()
    if not enemy:
        raise HTTPException(status_code=404, detail="No enemies found in database")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è
    player_stats = db.query(models.PlayerStats).filter(models.PlayerStats.owner_id == current_user.id).first()
    if not player_stats:
        player_stats = models.PlayerStats(owner_id=current_user.id)
        db.add(player_stats)
        db.commit()
        db.refresh(player_stats)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–æ—Ä–æ–≥
    if enemy.name == "Geometric Gargoyle" or "geometric" in enemy.name.lower():
        problem, encounter_data = generate_special_encounter(enemy.name, player_stats.level)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤–æ—Ä–æ–≥–∞ –∑ encounter_data —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        enemy.description = encounter_data.get("description", enemy.name)
        
    else:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –∑–∞–¥–∞—á—É
        problem = math_service.generate_problem(
            topic=enemy.math_topic, 
            level=player_stats.level,
            player_id=current_user.id
        )

    return battle_schema.BattleState(
        player_stats=player_stats,
        enemy=enemy,
        enemy_current_hp=enemy.max_hp,
        problem=problem
    )


@router.post("/battle/answer", response_model=battle_schema.AnswerResult)
def submit_answer(payload: battle_schema.AnswerPayload, db: Session = Depends(deps.get_db), current_user: models.User = Depends(get_current_user)):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≥—Ä–∞–≤—Ü—è –∑ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–º —Ñ—ñ–¥–±–µ–∫–æ–º"""
    
    enemy = db.query(models.Enemy).filter(models.Enemy.id == payload.enemy_id).first()
    player_stats = db.query(models.PlayerStats).filter(models.PlayerStats.owner_id == current_user.id).first()

    if not enemy or not player_stats:
        raise HTTPException(status_code=404, detail="Player or Enemy not found")

    problem = payload.problem
    is_correct = False
    problem_data = problem.data or {}
    problem_type = problem_data.get("type") or enemy.math_topic

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if problem_type == "progressive_equation" and payload.operation:
        # –ù–æ–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–∞ –∞–ª–≥–µ–±—Ä–∞
        from app.services.math_service import adaptive_engine
        
        response_analysis = adaptive_engine.process_student_response(
            current_user.id,
            problem_data,
            payload.operation
        )
        
        is_correct = response_analysis["is_correct"]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ problem_data –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        if "next_step" in response_analysis and response_analysis["next_step"] is not None:
            problem_data["current_step"] = response_analysis["next_step"]
            new_problem_obj = problem  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É –∑–∞–¥–∞—á—É
            new_problem_obj.data = problem_data
        elif response_analysis.get("is_equation_solved", False):
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É –∑–∞–¥–∞—á—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó
            new_problem_obj = math_service.generate_problem(
                topic=enemy.math_topic, 
                level=player_stats.level,
                player_id=current_user.id
            )
        else:
            new_problem_obj = problem  # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Ç–æ–π —Å–∞–º–∏–π –∫—Ä–æ–∫
            new_problem_obj.data = problem_data
            
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
        feedback_message = response_analysis.get("feedback", "")
        concept_reinforcement = response_analysis.get("mastery_update", {})
        mistake_analysis = response_analysis.get("error_analysis", {}).get("pattern", "")
        encouragement = response_analysis.get("encouragement", "")
        
    elif problem_type == "equation" and payload.operation:
        # –°—Ç–∞—Ä–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–ª–≥–µ–±—Ä–∏ (fallback)
        steps = problem_data.get("solution_steps", [])
        index = problem_data.get("current_step_index", 0)
        if index < len(steps) and payload.operation.strip() == steps[index].get("operation", "").strip():
            is_correct = True
    elif payload.answer is not None and problem.answer is not None:
        if payload.answer == problem.answer:
            is_correct = True

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫
    feedback_message = ""
    concept_reinforcement = ""
    mistake_analysis = ""
    encouragement = ""

    xp_gained = 0
    damage_dealt = 0
    new_problem_obj = problem

    if is_correct:
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∫–æ–¥–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º vulnerability/resistance
        base_damage = 15 + player_stats.math_power
        if enemy.vulnerability and enemy.vulnerability == problem_type:
            damage_dealt = base_damage * 2
            feedback_message = f"–ö—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä! –í–æ—Ä–æ–≥ —Å–ª–∞–±–∫–∏–π –¥–æ {problem_type}!"
        elif enemy.resistance and enemy.resistance == problem_type:
            damage_dealt = base_damage // 2
            feedback_message = f"–í–æ—Ä–æ–≥ —Å—Ç—ñ–π–∫–∏–π –¥–æ {problem_type}. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ç–∏–ø –∑–∞–¥–∞—á."
        else:
            damage_dealt = base_damage
            feedback_message = f"–í–ª—É—á–Ω–∏–π —É–¥–∞—Ä! –ó–∞–≤–¥–∞–Ω–æ {damage_dealt} —à–∫–æ–¥–∏."

        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ—Å–≤—ñ–¥
        xp_gained = 10
        player_stats.xp += xp_gained

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
        xp_for_next_level = 100 * player_stats.level
        if player_stats.xp >= xp_for_next_level:
            player_stats.level += 1
            player_stats.max_hp += 10
            player_stats.hp = player_stats.max_hp
            player_stats.math_power += 5
            encouragement = f"üåü –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {player_stats.level}! –í–∞—à–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–ª–∞ –∑—Ä–æ—Å–ª–∞!"

        # –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–µ –ø—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
        concept_reinforcement = problem_data.get("concept_hint", "")
        if not concept_reinforcement and problem_data.get("context_explanation"):
            concept_reinforcement = problem_data["context_explanation"]

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É –∑–∞–¥–∞—á—É
        if problem_type == "equation":
            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∞–ª–≥–µ–±—Ä–∏ (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
            problem_data["current_step_index"] += 1
            parts = problem_data.get("equation_parts", {})
            if problem_data["current_step_index"] == 1:
                parts["c"] -= parts["b"]
                parts["b"] = 0
            elif problem_data["current_step_index"] == 2:
                parts["c"] //= parts["a"]
                parts["a"] = 1
                parts["x_isolated"] = True
            
            if parts.get("x_isolated"):
                new_problem_obj = math_service.generate_problem(topic=enemy.math_topic, level=player_stats.level)
            else:
                new_problem_obj.data = problem_data
        else:
            new_problem_obj = math_service.generate_problem(topic=enemy.math_topic, level=player_stats.level)

    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        player_damage = 10
        player_stats.hp = max(0, player_stats.hp - player_damage)
        
        feedback_message = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {player_damage} —à–∫–æ–¥–∏."
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context = problem_data.get("context", "")
        if context == "magic_crystals" and problem_type == "addition":
            mistake_analysis = "–ü–∞–º'—è—Ç–∞–π—Ç–µ: –∫—Ä–∏—Å—Ç–∞–ª–∏ –º–æ–∂–Ω–∞ –æ–±'—î–¥–Ω—É–≤–∞—Ç–∏ –≤ –±—É–¥—å-—è–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É!"
        elif context == "army_formation" and problem_type == "multiplication":
            mistake_analysis = "–°–ø—Ä–æ–±—É–π—Ç–µ —É—è–≤–∏—Ç–∏ –≤–æ—ó–Ω—ñ–≤ —É —Ä—è–¥–∞—Ö —Ç–∞ —Å—Ç–æ–≤–ø—Ü—è—Ö - —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –∑ –º–Ω–æ–∂–µ–Ω–Ω—è–º."
        elif context == "depleted_mana" and problem_type == "subtraction":
            mistake_analysis = "–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –Ω–µ –∫–æ–º—É—Ç–∞—Ç–∏–≤–Ω–µ - –ø–æ—Ä—è–¥–æ–∫ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è!"
        else:
            mistake_analysis = "–ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –∑–∞–¥–∞—á—É —É–≤–∞–∂–Ω–æ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            
        encouragement = "–ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –ö–æ–∂–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - —Ü–µ –∫—Ä–æ–∫ –¥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è."

    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    db.commit()
    db.refresh(player_stats)

    return battle_schema.AnswerResult(
        is_correct=is_correct,
        new_player_stats=player_stats,
        xp_gained=xp_gained,
        damage_dealt=damage_dealt,
        new_problem=new_problem_obj,
        feedback_message=feedback_message,
        concept_reinforcement=concept_reinforcement,
        mistake_analysis=mistake_analysis,
        encouragement=encouragement
    )

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–∫–∏
@router.get("/battle/hint/{enemy_id}")
def get_concept_hint(enemy_id: int, db: Session = Depends(deps.get_db), current_user: models.User = Depends(get_current_user)):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∑–∞–¥–∞—á—ñ"""
    
    enemy = db.query(models.Enemy).filter(models.Enemy.id == enemy_id).first()
    if not enemy:
        raise HTTPException(status_code=404, detail="Enemy not found")
    
    player_stats = db.query(models.PlayerStats).filter(models.PlayerStats.owner_id == current_user.id).first()
    if not player_stats:
        raise HTTPException(status_code=404, detail="Player stats not found")
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–¥–∞—á—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó
    sample_problem = math_service.generate_problem(topic=enemy.math_topic, level=1)  # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥
    
    return {
        "topic": enemy.math_topic,
        "concept_explanation": sample_problem.data.get("context_explanation", ""),
        "example": sample_problem.display_text,
        "hint": sample_problem.data.get("concept_hint", "")
    }

# –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π endpoint –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö –ø—ñ–¥–∫–∞–∑–æ–∫
@router.get("/battle/geometry-hint/{problem_type}")
def get_geometry_hint(
    problem_type: str, 
    shape_type: str = "rectangle",
    db: Session = Depends(deps.get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á"""
    
    hints = {
        "area": {
            "rectangle": {
                "formula": "–ü–ª–æ—â–∞ = –¥–æ–≤–∂–∏–Ω–∞ √ó —à–∏—Ä–∏–Ω–∞",
                "visualization_tip": "–£—è–≤—ñ—Ç—å –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –ø–æ–¥—ñ–ª–µ–Ω–∏–º –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ",
                "common_mistakes": ["–ü–ª—É—Ç–∞—Ç–∏ –ø–ª–æ—â—É –∑ –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–º", "–ó–∞–±—É–≤–∞—Ç–∏ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è"],
                "interactive_demo": True
            },
            "circle": {
                "formula": "–ü–ª–æ—â–∞ = œÄ √ó —Ä–∞–¥—ñ—É—Å¬≤",
                "visualization_tip": "–£—è–≤—ñ—Ç—å –∫–æ–ª–æ –≤–ø–∏—Å–∞–Ω–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç",
                "common_mistakes": ["–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞–º–µ—Ç—Ä –∑–∞–º—ñ—Å—Ç—å —Ä–∞–¥—ñ—É—Å–∞", "–ó–∞–±—É–≤–∞—Ç–∏ –≤–æ–∑–≤–æ–¥–∏—Ç–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç"],
                "interactive_demo": True
            },
            "triangle": {
                "formula": "–ü–ª–æ—â–∞ = ¬Ω √ó –æ—Å–Ω–æ–≤–∞ √ó –≤–∏—Å–æ—Ç–∞ –∞–±–æ —Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞",
                "visualization_tip": "–í–∏—Å–æ—Ç–∞ –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–∞ –¥–æ –æ—Å–Ω–æ–≤–∏",
                "common_mistakes": ["–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–º—ñ—Å—Ç—å –≤–∏—Å–æ—Ç–∏", "–ó–∞–±—É–≤–∞—Ç–∏ –¥—ñ–ª–∏—Ç–∏ –Ω–∞ 2"],
                "interactive_demo": True
            }
        },
        "perimeter": {
            "rectangle": {
                "formula": "–ü–µ—Ä–∏–º–µ—Ç—Ä = 2 √ó (–¥–æ–≤–∂–∏–Ω–∞ + —à–∏—Ä–∏–Ω–∞)",
                "visualization_tip": "–£—è–≤—ñ—Ç—å, —â–æ –π–¥–µ—Ç–µ –Ω–∞–≤–∫–æ–ª–æ —Ñ—ñ–≥—É—Ä–∏",
                "common_mistakes": ["–ó–∞–±—É–≤–∞—Ç–∏ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ 2", "–ü–ª—É—Ç–∞—Ç–∏ –∑ –ø–ª–æ—â–µ—é"]
            },
            "triangle": {
                "formula": "–ü–µ—Ä–∏–º–µ—Ç—Ä = —Å—Ç–æ—Ä–æ–Ω–∞‚ÇÅ + —Å—Ç–æ—Ä–æ–Ω–∞‚ÇÇ + —Å—Ç–æ—Ä–æ–Ω–∞‚ÇÉ",
                "visualization_tip": "–ü—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π—Ç–µ –≤—Å—ñ —Å—Ç–æ—Ä–æ–Ω–∏",
                "common_mistakes": ["–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–∏—Å–æ—Ç—É –∑–∞–º—ñ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω–∏"]
            }
        },
        "pythagorean": {
            "triangle": {
                "formula": "a¬≤ + b¬≤ = c¬≤, –¥–µ c - –≥—ñ–ø–æ—Ç–µ–Ω—É–∑–∞",
                "visualization_tip": "–ì—ñ–ø–æ—Ç–µ–Ω—É–∑–∞ - –Ω–∞–π–¥–æ–≤—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞, –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ –ø—Ä—è–º–æ–º—É –∫—É—Ç—É",
                "common_mistakes": ["–ü–ª—É—Ç–∞—Ç–∏ –∫–∞—Ç–µ—Ç–∏ –∑ –≥—ñ–ø–æ—Ç–µ–Ω—É–∑–æ—é", "–ó–∞–±—É–≤–∞—Ç–∏ –±—Ä–∞—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å"],
                "theorem_proof": "–ú–æ–∂–Ω–∞ –¥–æ–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–æ—â—ñ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞—Ö"
            }
        }
    }
    
    hint_data = hints.get(problem_type, {}).get(shape_type, {
        "formula": "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∏–ø—É –∑–∞–¥–∞—á—ñ",
        "visualization_tip": "–û—Å–Ω–æ–≤–∏ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó –∑–∞–≤–∂–¥–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å"
    })
    
    return {
        "problem_type": problem_type,
        "shape_type": shape_type,
        **hint_data,
        "interactive_tools": ["ruler", "protractor", "grid"] if hint_data.get("interactive_demo") else []
    }